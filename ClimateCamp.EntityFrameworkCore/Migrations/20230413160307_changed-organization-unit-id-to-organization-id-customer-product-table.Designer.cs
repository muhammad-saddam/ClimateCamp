// <auto-generated />
using System;
using ClimateCamp.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace ClimateCamp.Migrations
{
    [DbContext(typeof(CommonDbContext))]
    [Migration("20230413160307_changed-organization-unit-id-to-organization-id-customer-product-table")]
    partial class changedorganizationunitidtoorganizationidcustomerproducttable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ReturnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProviderKey", "TenantId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("bit");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.HasIndex("EntityFullName", "DynamicPropertyId", "TenantId")
                        .IsUnique()
                        .HasFilter("[EntityFullName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicEntityProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DynamicEntityPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicEntityPropertyId");

                    b.ToTable("AbpDynamicEntityPropertyValues");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyName", "TenantId")
                        .IsUnique()
                        .HasFilter("[PropertyName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.ToTable("AbpDynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NewValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OriginalValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookEvents");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("AbpWebhookSendAttempts");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Webhooks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookSubscriptions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ActivityData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConsumptionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ConsumptionStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DataQualityType")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmissionFactorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmissionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustrialProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("SourceTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<bool>("isProcessed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EmissionFactorId");

                    b.HasIndex("EmissionGroupId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("ActivityData", "Transactions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmissionsSourceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmissionsSourceId");

                    b.ToTable("ActivityTypes", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.CustomerProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerProducts", "Master");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.Emission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("CH4")
                        .HasColumnType("real");

                    b.Property<int?>("CH4UnitId")
                        .HasColumnType("int");

                    b.Property<float?>("CO2")
                        .HasColumnType("real");

                    b.Property<float?>("CO2E")
                        .HasColumnType("real");

                    b.Property<int?>("CO2EUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("CO2UnitId")
                        .HasColumnType("int");

                    b.Property<float?>("CO2eFactor")
                        .HasColumnType("real");

                    b.Property<int?>("CO2eFactorUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EmissionsDataQualityScore")
                        .HasColumnType("int");

                    b.Property<Guid>("EmissionsFactorsLibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("HFCs")
                        .HasColumnType("real");

                    b.Property<int?>("HFCsUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<float?>("N20")
                        .HasColumnType("real");

                    b.Property<int?>("N20UnitId")
                        .HasColumnType("int");

                    b.Property<float?>("NF3")
                        .HasColumnType("real");

                    b.Property<int?>("NF3UnitId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrganizationUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("OtherGHGs")
                        .HasColumnType("real");

                    b.Property<int?>("OtherGHGsUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("PFCs")
                        .HasColumnType("real");

                    b.Property<int?>("PFCsUnitId")
                        .HasColumnType("int");

                    b.Property<Guid>("ResponsibleEntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResponsibleEntityType")
                        .HasColumnType("int");

                    b.Property<float?>("SF6")
                        .HasColumnType("real");

                    b.Property<int?>("SF6UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityDataId");

                    b.HasIndex("CH4UnitId");

                    b.HasIndex("CO2EUnitId");

                    b.HasIndex("CO2UnitId");

                    b.HasIndex("EmissionsFactorsLibraryId");

                    b.HasIndex("HFCsUnitId");

                    b.HasIndex("N20UnitId");

                    b.HasIndex("NF3UnitId");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("OtherGHGsUnitId");

                    b.HasIndex("PFCsUnitId");

                    b.HasIndex("SF6UnitId");

                    b.ToTable("Emissions", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionGroups", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EmissionSourceId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentEmissionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmissionSourceId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentEmissionGroupId");

                    b.ToTable("EmissionGroups", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionsFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("CH4")
                        .HasColumnType("real");

                    b.Property<int?>("CH4UnitId")
                        .HasColumnType("int");

                    b.Property<float>("CO2")
                        .HasColumnType("real");

                    b.Property<float>("CO2E")
                        .HasColumnType("real");

                    b.Property<int?>("CO2EUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("CO2UnitId")
                        .HasColumnType("int");

                    b.Property<string>("CalculationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalculationOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentationReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmissionsSourceId")
                        .HasColumnType("int");

                    b.Property<float>("HFCs")
                        .HasColumnType("real");

                    b.Property<int?>("HFCsUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LifeCycleActivityId")
                        .HasColumnType("int");

                    b.Property<float>("N20")
                        .HasColumnType("real");

                    b.Property<int?>("N20UnitId")
                        .HasColumnType("int");

                    b.Property<float>("NF3")
                        .HasColumnType("real");

                    b.Property<int?>("NF3UnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("OtherGHGs")
                        .HasColumnType("real");

                    b.Property<int?>("OtherGHGsUnitId")
                        .HasColumnType("int");

                    b.Property<float>("PFCs")
                        .HasColumnType("real");

                    b.Property<int?>("PFCsUnitId")
                        .HasColumnType("int");

                    b.Property<float>("SF6")
                        .HasColumnType("real");

                    b.Property<int?>("SF6UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CH4UnitId");

                    b.HasIndex("CO2EUnitId");

                    b.HasIndex("CO2UnitId");

                    b.HasIndex("EmissionsSourceId");

                    b.HasIndex("HFCsUnitId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("LifeCycleActivityId");

                    b.HasIndex("N20UnitId");

                    b.HasIndex("NF3UnitId");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("OtherGHGsUnitId");

                    b.HasIndex("PFCsUnitId");

                    b.HasIndex("SF6UnitId");

                    b.HasIndex("SectorId");

                    b.HasIndex("UnitId");

                    b.ToTable("EmissionsFactors", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionsFactorsLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmissionsFactorsLibraries", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionsSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmissionScope")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmissionsFactorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmissionsFactorsId");

                    b.ToTable("EmissionsSources", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.GreenhouseGas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GWPFactor")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GreenhouseGases", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.IndustrialProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IndustrialProcesses", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.LifeCycleActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LifeCycleActivity", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ProductionQuantity")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ProductEmissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Audited")
                        .HasColumnType("bit");

                    b.Property<string>("Auditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("CO2eq")
                        .HasColumnType("real");

                    b.Property<int?>("CO2eqUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EmissionSourceType")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrganizationUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodType")
                        .HasColumnType("int");

                    b.Property<float?>("PrimaryDataShare")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrganizationId");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductEmissions", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ProductsEmissionSources", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Availability")
                        .HasColumnType("int");

                    b.Property<int>("EmissionsSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("Methodology")
                        .HasColumnType("int");

                    b.Property<float?>("PrimaryDataShare")
                        .HasColumnType("real");

                    b.Property<Guid?>("ProductEmissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("tCO2e")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EmissionsSourceId");

                    b.HasIndex("ProductEmissionsId");

                    b.ToTable("ProductsEmissionSources", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sector", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool>("IsBaseUnit")
                        .HasColumnType("bit");

                    b.Property<float>("Multiplier")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModeOfTransport")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportationKind")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes", "Reference");
                });

            modelBuilder.Entity("ClimateCamp.Common.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("ClimateCamp.Common.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLoginExperience")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("ClimateCamp.Common.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("ClimateCamp.Core.CarbonCompute.ContractualInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnergySource")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContractualInstruments", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.Core.ConversionFactors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ConversionFactor")
                        .HasColumnType("real");

                    b.Property<int>("ConversionUnit")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityDataId");

                    b.HasIndex("ProductId");

                    b.ToTable("ConversionFactors", "Master");
                });

            modelBuilder.Entity("ClimateCamp.Core.CustomerSupplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float?>("CO2E")
                        .HasColumnType("real");

                    b.Property<string>("ContactEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("YearlyProductQuantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearlyServiceQuantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerOrganizationId");

                    b.HasIndex("SupplierOrganizationId");

                    b.ToTable("CustomerSuppliers", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.Core.DataCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DataCollections");
                });

            modelBuilder.Entity("ClimateCamp.Core.EmissionsSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Audited")
                        .HasColumnType("bit");

                    b.Property<string>("Auditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActiveScope1Emissions")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActiveScope2Emissions")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActiveScope3Emissions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCO2ePerProductionUnitActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsScope1DetailViewActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsScope2DetailViewActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScope3DetailViewActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("ProductionMetricId")
                        .HasColumnType("int");

                    b.Property<float?>("ProductionQuantity")
                        .HasColumnType("real");

                    b.Property<float?>("Scope1CO2ePPU")
                        .HasColumnType("real");

                    b.Property<float?>("Scope1tCO2e")
                        .HasColumnType("real");

                    b.Property<float?>("Scope2CO2ePPU")
                        .HasColumnType("real");

                    b.Property<int>("Scope2Methodology")
                        .HasColumnType("int");

                    b.Property<float?>("Scope2tCO2e")
                        .HasColumnType("real");

                    b.Property<float?>("Scope3CO2ePPU")
                        .HasColumnType("real");

                    b.Property<float?>("Scope3PrimaryDataShare")
                        .HasColumnType("real");

                    b.Property<float?>("Scope3tCO2e")
                        .HasColumnType("real");

                    b.Property<float?>("TotalPCfProxy")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("ProductionMetricId");

                    b.ToTable("EmissionsSummary", "Master");
                });

            modelBuilder.Entity("ClimateCamp.Core.EmissionsSummaryScopeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Availability")
                        .HasColumnType("int");

                    b.Property<int>("EmissionScope")
                        .HasColumnType("int");

                    b.Property<int>("EmissionSourceId")
                        .HasColumnType("int");

                    b.Property<Guid>("EmissionSummaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Methodology")
                        .HasColumnType("int");

                    b.Property<float?>("PrimaryDataShare")
                        .HasColumnType("real");

                    b.Property<float?>("tCO2e")
                        .HasColumnType("real");

                    b.Property<float?>("tCO2ePPU")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("EmissionsSummaryScopeDetails", "Master");
                });

            modelBuilder.Entity("ClimateCamp.Core.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DefaultUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentIndustryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUnitId");

                    b.HasIndex("ParentIndustryId");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("ClimateCamp.Core.Offset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailsTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumVolume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Offsets");
                });

            modelBuilder.Entity("ClimateCamp.Core.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnnualReportingPeriod")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BaseLineEmission")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BaseLineYear")
                        .HasColumnType("int");

                    b.Property<Guid>("BillingPreferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmissionsFactorsLibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("HubSpotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductionQuantity")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductionQuantityUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ReportingFrequencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Target")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalEmployees")
                        .HasColumnType("int");

                    b.Property<string>("VATNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("EmissionsFactorsLibraryId");

                    b.HasIndex("ProductionQuantityUnitId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ClimateCamp.Core.OrganizationIndustry", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.HasKey("OrganizationId", "IndustryId");

                    b.HasIndex("IndustryId");

                    b.ToTable("OrganizationIndustries");
                });

            modelBuilder.Entity("ClimateCamp.Core.OrganizationTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TSFType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationTargets", "Master");
                });

            modelBuilder.Entity("ClimateCamp.Core.OrganizationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<double>("MonthlyRevenue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentOrganizationUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VATNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentOrganizationUnitId");

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("ClimateCamp.Core.ProductGroups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentProductGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentProductGroupId");

                    b.ToTable("ProductGroups", "Master");
                });

            modelBuilder.Entity("ClimateCamp.Core.Reduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailsTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isFavourite")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Reductions");
                });

            modelBuilder.Entity("ClimateCamp.Core.ScienceBasedTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BaseLineYear")
                        .HasColumnType("int");

                    b.Property<int?>("LongTermTarget")
                        .HasColumnType("int");

                    b.Property<int?>("LongTermTargetYear")
                        .HasColumnType("int");

                    b.Property<int?>("NearTermTarget")
                        .HasColumnType("int");

                    b.Property<int?>("NearTermTargetYear")
                        .HasColumnType("int");

                    b.Property<int?>("NetZeroCommitted")
                        .HasColumnType("int");

                    b.Property<int?>("NetZeroYear")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationTargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SBTI")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTargetId");

                    b.ToTable("ScienceBasedTargets", "Master");
                });

            modelBuilder.Entity("ClimateCamp.Core.TargetIndependant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseLineYear")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationTargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Scope1Target")
                        .HasColumnType("real");

                    b.Property<float?>("Scope2Target")
                        .HasColumnType("real");

                    b.Property<float?>("Scope3Target")
                        .HasColumnType("real");

                    b.Property<int?>("TargetYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTargetId");

                    b.HasIndex("OrganizationUnitId");

                    b.ToTable("TargetIndependant", "Master");
                });

            modelBuilder.Entity("ClimateCamp.Lookup.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreeCharCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoCharCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ClimateCamp.Core.Editions.CustomEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContactSales")
                        .HasColumnType("bit");

                    b.Property<string>("PriceLabel")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("CustomEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.BusinessTravelData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("BusinessTravelData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmployeeCommuteData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("EmployeeCommuteData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EndOfLifeTreatmentData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<int>("WasteTreatmentMethod")
                        .HasColumnType("int");

                    b.ToTable("EndOfLifeTreatmentData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.FuelAndEnergyData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<int?>("EnergyType")
                        .HasColumnType("int");

                    b.Property<Guid?>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("FuelAndEnergyData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.FugitiveEmissionsData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<Guid>("GreenhouseGasId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("GreenhouseGasId");

                    b.ToTable("FugitiveEmissionsData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.MobileCombustionData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<float?>("Distance")
                        .HasColumnType("real");

                    b.Property<int?>("DistanceUnitId")
                        .HasColumnType("int");

                    b.Property<Guid?>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DistanceUnitId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("MobileCombustionData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.PurchasedEnergyData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<int?>("ContractualInstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("EnergyMix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnergyType")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ContractualInstrumentId");

                    b.ToTable("PurchasedEnergyData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.PurchasedProductsData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchasedProductsData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.StationaryCombustionData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<Guid?>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IndustrialProcessType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("StationaryCombustionData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.TransportAndDistributionData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<float?>("Distance")
                        .HasColumnType("real");

                    b.Property<int?>("DistanceUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("GoodsQuantity")
                        .HasColumnType("real");

                    b.Property<int?>("GoodsUnitId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("TransportAndDistributionData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.WasteGeneratedData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<int>("WasteTreatmentMethod")
                        .HasColumnType("int");

                    b.ToTable("WasteGeneratedData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.Core.CarbonCompute.UseOfSoldProductsData", b =>
                {
                    b.HasBaseType("ClimateCamp.CarbonCompute.ActivityData");

                    b.Property<float?>("ElectricityConsumptionPerUseOfProduct")
                        .HasColumnType("real");

                    b.Property<int?>("ElectricityUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("FuelUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("FuelUsedPerUseOfProduct")
                        .HasColumnType("real");

                    b.Property<float?>("RefrigerantLeakagePerUseOfProduct")
                        .HasColumnType("real");

                    b.Property<int?>("RefrigerantLeakageUnitId")
                        .HasColumnType("int");

                    b.ToTable("UseOfSoldProductsData", "Transactions");
                });

            modelBuilder.Entity("ClimateCamp.Core.Features.EditionFeatureSettingCustom", b =>
                {
                    b.HasBaseType("Abp.Application.Features.EditionFeatureSetting");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowActiveLabel")
                        .HasColumnType("bit");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSettingCustom");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Roles.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany()
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicEntityProperty", "DynamicEntityProperty")
                        .WithMany()
                        .HasForeignKey("DynamicEntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicEntityProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany("DynamicPropertyValues")
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.HasOne("Abp.Webhooks.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ActivityData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsFactor", "EmissionFactor")
                        .WithMany()
                        .HasForeignKey("EmissionFactorId");

                    b.HasOne("ClimateCamp.CarbonCompute.EmissionGroups", "EmissionGroup")
                        .WithMany()
                        .HasForeignKey("EmissionGroupId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ClimateCamp.Core.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("ActivityType");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("EmissionFactor");

                    b.Navigation("EmissionGroup");

                    b.Navigation("LastModifierUser");

                    b.Navigation("OrganizationUnit");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ActivityType", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsSource", "EmissionsSource")
                        .WithMany()
                        .HasForeignKey("EmissionsSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmissionsSource");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.CustomerProduct", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ClimateCamp.CarbonCompute.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");

                    b.Navigation("Organization");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.Emission", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", "ActivityData")
                        .WithMany()
                        .HasForeignKey("ActivityDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "CH4Unit")
                        .WithMany()
                        .HasForeignKey("CH4UnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "CO2EUnit")
                        .WithMany()
                        .HasForeignKey("CO2EUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "CO2Unit")
                        .WithMany()
                        .HasForeignKey("CO2UnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsFactorsLibrary", "EmissionsFactorsLibrary")
                        .WithMany()
                        .HasForeignKey("EmissionsFactorsLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "HFCsUnit")
                        .WithMany()
                        .HasForeignKey("HFCsUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "N20Unit")
                        .WithMany()
                        .HasForeignKey("N20UnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "NF3Unit")
                        .WithMany()
                        .HasForeignKey("NF3UnitId");

                    b.HasOne("ClimateCamp.Core.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "OtherGHGsUnit")
                        .WithMany()
                        .HasForeignKey("OtherGHGsUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "PFCsUnit")
                        .WithMany()
                        .HasForeignKey("PFCsUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "SF6Unit")
                        .WithMany()
                        .HasForeignKey("SF6UnitId");

                    b.Navigation("ActivityData");

                    b.Navigation("CH4Unit");

                    b.Navigation("CO2EUnit");

                    b.Navigation("CO2Unit");

                    b.Navigation("EmissionsFactorsLibrary");

                    b.Navigation("HFCsUnit");

                    b.Navigation("N20Unit");

                    b.Navigation("NF3Unit");

                    b.Navigation("OrganizationUnit");

                    b.Navigation("OtherGHGsUnit");

                    b.Navigation("PFCsUnit");

                    b.Navigation("SF6Unit");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionGroups", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsSource", "EmissionsSource")
                        .WithMany()
                        .HasForeignKey("EmissionSourceId");

                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ClimateCamp.CarbonCompute.EmissionGroups", "ParentEmissionGroup")
                        .WithMany("Children")
                        .HasForeignKey("ParentEmissionGroupId");

                    b.Navigation("EmissionsSource");

                    b.Navigation("Organization");

                    b.Navigation("ParentEmissionGroup");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionsFactor", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "CH4Unit")
                        .WithMany()
                        .HasForeignKey("CH4UnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "CO2EUnit")
                        .WithMany()
                        .HasForeignKey("CO2EUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "CO2Unit")
                        .WithMany()
                        .HasForeignKey("CO2UnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsSource", "EmissionsSource")
                        .WithMany()
                        .HasForeignKey("EmissionsSourceId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "HFCsUnit")
                        .WithMany()
                        .HasForeignKey("HFCsUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsFactorsLibrary", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.HasOne("ClimateCamp.CarbonCompute.LifeCycleActivity", "LifeCycleActivity")
                        .WithMany()
                        .HasForeignKey("LifeCycleActivityId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "N20Unit")
                        .WithMany()
                        .HasForeignKey("N20UnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "NF3Unit")
                        .WithMany()
                        .HasForeignKey("NF3UnitId");

                    b.HasOne("ClimateCamp.Core.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "OtherGHGsUnit")
                        .WithMany()
                        .HasForeignKey("OtherGHGsUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "PFCsUnit")
                        .WithMany()
                        .HasForeignKey("PFCsUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "SF6Unit")
                        .WithMany()
                        .HasForeignKey("SF6UnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("CH4Unit");

                    b.Navigation("CO2EUnit");

                    b.Navigation("CO2Unit");

                    b.Navigation("EmissionsSource");

                    b.Navigation("HFCsUnit");

                    b.Navigation("Library");

                    b.Navigation("LifeCycleActivity");

                    b.Navigation("N20Unit");

                    b.Navigation("NF3Unit");

                    b.Navigation("OrganizationUnit");

                    b.Navigation("OtherGHGsUnit");

                    b.Navigation("PFCsUnit");

                    b.Navigation("SF6Unit");

                    b.Navigation("Sector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionsSource", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsFactor", "EmissionsFactors")
                        .WithMany()
                        .HasForeignKey("EmissionsFactorsId");

                    b.Navigation("EmissionsFactors");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.Product", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("ClimateCamp.CarbonCompute.Product", "ParentProduct")
                        .WithMany("Products")
                        .HasForeignKey("ParentProductId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");

                    b.Navigation("Organization");

                    b.Navigation("ParentProduct");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ProductEmissions", b =>
                {
                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("CustomerOrganizationId");

                    b.HasOne("ClimateCamp.Core.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.Product", "Product")
                        .WithMany("ProductEmissions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("OrganizationUnit");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ProductsEmissionSources", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsSource", "EmissionsSource")
                        .WithMany("ProductsEmissionSources")
                        .HasForeignKey("EmissionsSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.ProductEmissions", "ProductEmissions")
                        .WithMany("ProductsEmissionSources")
                        .HasForeignKey("ProductEmissionsId");

                    b.Navigation("EmissionsSource");

                    b.Navigation("ProductEmissions");
                });

            modelBuilder.Entity("ClimateCamp.Common.Authorization.Roles.Role", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ClimateCamp.Common.Authorization.Users.User", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ClimateCamp.Common.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("Edition");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("ClimateCamp.Core.ConversionFactors", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", "ActivityData")
                        .WithMany()
                        .HasForeignKey("ActivityDataId");

                    b.HasOne("ClimateCamp.CarbonCompute.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("ActivityData");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClimateCamp.Core.CustomerSupplier", b =>
                {
                    b.HasOne("ClimateCamp.Lookup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ClimateCamp.Core.Organization", "CustomerOrganization")
                        .WithMany()
                        .HasForeignKey("CustomerOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.Core.Organization", "SupplierOrganization")
                        .WithMany("SupplierOrganizations")
                        .HasForeignKey("SupplierOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CustomerOrganization");

                    b.Navigation("SupplierOrganization");
                });

            modelBuilder.Entity("ClimateCamp.Core.DataCollection", b =>
                {
                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ClimateCamp.Core.EmissionsSummary", b =>
                {
                    b.HasOne("ClimateCamp.Core.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "ProductionMetric")
                        .WithMany()
                        .HasForeignKey("ProductionMetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationUnit");

                    b.Navigation("ProductionMetric");
                });

            modelBuilder.Entity("ClimateCamp.Core.Industry", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("DefaultUnitId");

                    b.HasOne("ClimateCamp.Core.Industry", "ParentIndustry")
                        .WithMany("Children")
                        .HasForeignKey("ParentIndustryId");

                    b.Navigation("ParentIndustry");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ClimateCamp.Core.Offset", b =>
                {
                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ClimateCamp.Core.Organization", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Editions")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("ClimateCamp.CarbonCompute.EmissionsFactorsLibrary", "EmissionsFactorsLibrary")
                        .WithMany()
                        .HasForeignKey("EmissionsFactorsLibraryId");

                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "ProductionQuantityUnit")
                        .WithMany()
                        .HasForeignKey("ProductionQuantityUnitId");

                    b.Navigation("Editions");

                    b.Navigation("EmissionsFactorsLibrary");

                    b.Navigation("ProductionQuantityUnit");
                });

            modelBuilder.Entity("ClimateCamp.Core.OrganizationIndustry", b =>
                {
                    b.HasOne("ClimateCamp.Core.Industry", "Industry")
                        .WithMany("OrganizationIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany("OrganizationIndustries")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ClimateCamp.Core.OrganizationTarget", b =>
                {
                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ClimateCamp.Core.OrganizationUnit", b =>
                {
                    b.HasOne("ClimateCamp.Lookup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.Core.OrganizationUnit", "ParentOrganizationUnit")
                        .WithMany("Children")
                        .HasForeignKey("ParentOrganizationUnitId");

                    b.Navigation("Country");

                    b.Navigation("Organization");

                    b.Navigation("ParentOrganizationUnit");
                });

            modelBuilder.Entity("ClimateCamp.Core.ProductGroups", b =>
                {
                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.Core.ProductGroups", "ParentProductGroup")
                        .WithMany("Children")
                        .HasForeignKey("ParentProductGroupId");

                    b.Navigation("Organization");

                    b.Navigation("ParentProductGroup");
                });

            modelBuilder.Entity("ClimateCamp.Core.Reduction", b =>
                {
                    b.HasOne("ClimateCamp.Core.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ClimateCamp.Core.ScienceBasedTarget", b =>
                {
                    b.HasOne("ClimateCamp.Core.OrganizationTarget", "OrganizationTarget")
                        .WithMany()
                        .HasForeignKey("OrganizationTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationTarget");
                });

            modelBuilder.Entity("ClimateCamp.Core.TargetIndependant", b =>
                {
                    b.HasOne("ClimateCamp.Core.OrganizationTarget", "OrganizationTarget")
                        .WithMany()
                        .HasForeignKey("OrganizationTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.Core.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationTarget");

                    b.Navigation("OrganizationUnit");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Roles.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("ClimateCamp.Common.Authorization.Users.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.BusinessTravelData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.BusinessTravelData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmployeeCommuteData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.EmployeeCommuteData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EndOfLifeTreatmentData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.EndOfLifeTreatmentData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.FuelAndEnergyData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.FuelAndEnergyData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.FugitiveEmissionsData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.GreenhouseGas", "GreenhouseGas")
                        .WithMany()
                        .HasForeignKey("GreenhouseGasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.FugitiveEmissionsData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GreenhouseGas");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.MobileCombustionData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.Unit", "DistanceUnit")
                        .WithMany()
                        .HasForeignKey("DistanceUnitId");

                    b.HasOne("ClimateCamp.CarbonCompute.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId");

                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.MobileCombustionData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("DistanceUnit");

                    b.Navigation("FuelType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.PurchasedEnergyData", b =>
                {
                    b.HasOne("ClimateCamp.Core.CarbonCompute.ContractualInstrument", "ContractualInstrument")
                        .WithMany()
                        .HasForeignKey("ContractualInstrumentId");

                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.PurchasedEnergyData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractualInstrument");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.PurchasedProductsData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.PurchasedProductsData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.StationaryCombustionData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId");

                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.StationaryCombustionData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.TransportAndDistributionData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.TransportAndDistributionData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateCamp.CarbonCompute.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.WasteGeneratedData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.CarbonCompute.WasteGeneratedData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateCamp.Core.CarbonCompute.UseOfSoldProductsData", b =>
                {
                    b.HasOne("ClimateCamp.CarbonCompute.ActivityData", null)
                        .WithOne()
                        .HasForeignKey("ClimateCamp.Core.CarbonCompute.UseOfSoldProductsData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Navigation("DynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionGroups", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.EmissionsSource", b =>
                {
                    b.Navigation("ProductsEmissionSources");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.Product", b =>
                {
                    b.Navigation("ProductEmissions");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ClimateCamp.CarbonCompute.ProductEmissions", b =>
                {
                    b.Navigation("ProductsEmissionSources");
                });

            modelBuilder.Entity("ClimateCamp.Common.Authorization.Roles.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ClimateCamp.Common.Authorization.Users.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");

                    b.Navigation("Settings");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("ClimateCamp.Core.Industry", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("OrganizationIndustries");
                });

            modelBuilder.Entity("ClimateCamp.Core.Organization", b =>
                {
                    b.Navigation("OrganizationIndustries");

                    b.Navigation("SupplierOrganizations");
                });

            modelBuilder.Entity("ClimateCamp.Core.OrganizationUnit", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("ClimateCamp.Core.ProductGroups", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
