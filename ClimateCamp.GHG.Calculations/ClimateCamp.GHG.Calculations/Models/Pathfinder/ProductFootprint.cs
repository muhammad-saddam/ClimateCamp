/*
 * pathfinder-endpoint
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ClimateCamp.GHG.Calculations.Pathfinder
{ 
    /// <summary>
    /// Data Type \&quot;ProductFootprint\&quot; of Spec Version 1
    /// </summary>
    [DataContract]
    public partial class ProductFootprint : IEquatable<ProductFootprint>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]

        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets SpecVersion
        /// </summary>
        [Required]
        [RegularExpression(@"\d+\.\d+\.\d+")]
        [MinLength(5)]
        [DataMember(Name="specVersion")]
        public string SpecVersion { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [Required]

        [DataMember(Name="version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [Required]

        [DataMember(Name="created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [Required]

        [MinLength(1)]
        [DataMember(Name="companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyIds
        /// </summary>
        [Required]

        [DataMember(Name="companyIds")]
        public CompanyIdSet CompanyIds { get; set; }

        /// <summary>
        /// Gets or Sets ProductDescription
        /// </summary>
        [Required]

        [DataMember(Name="productDescription")]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProductIds
        /// </summary>
        [Required]

        [DataMember(Name="productIds")]
        public ProductIdSet ProductIds { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategoryCpc
        /// </summary>
        [Required]

        [MinLength(1)]
        [DataMember(Name="productCategoryCpc")]
        public string ProductCategoryCpc { get; set; }

        /// <summary>
        /// Gets or Sets ProductNameCompany
        /// </summary>
        [Required]

        [MinLength(1)]
        [DataMember(Name="productNameCompany")]
        public string ProductNameCompany { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [Required]

        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Pcf
        /// </summary>
        [Required]

        [DataMember(Name="pcf")]
        public CarbonFootprint Pcf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductFootprint {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SpecVersion: ").Append(SpecVersion).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyIds: ").Append(CompanyIds).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  ProductIds: ").Append(ProductIds).Append("\n");
            sb.Append("  ProductCategoryCpc: ").Append(ProductCategoryCpc).Append("\n");
            sb.Append("  ProductNameCompany: ").Append(ProductNameCompany).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Pcf: ").Append(Pcf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductFootprint)obj);
        }

        /// <summary>
        /// Returns true if ProductFootprint instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductFootprint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductFootprint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    SpecVersion == other.SpecVersion ||
                    SpecVersion != null &&
                    SpecVersion.Equals(other.SpecVersion)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    CompanyIds == other.CompanyIds ||
                    CompanyIds != null &&
                    CompanyIds.Equals(other.CompanyIds)
                ) && 
                (
                    ProductDescription == other.ProductDescription ||
                    ProductDescription != null &&
                    ProductDescription.Equals(other.ProductDescription)
                ) && 
                (
                    ProductIds == other.ProductIds ||
                    ProductIds != null &&
                    ProductIds.Equals(other.ProductIds)
                ) && 
                (
                    ProductCategoryCpc == other.ProductCategoryCpc ||
                    ProductCategoryCpc != null &&
                    ProductCategoryCpc.Equals(other.ProductCategoryCpc)
                ) && 
                (
                    ProductNameCompany == other.ProductNameCompany ||
                    ProductNameCompany != null &&
                    ProductNameCompany.Equals(other.ProductNameCompany)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Pcf == other.Pcf ||
                    Pcf != null &&
                    Pcf.Equals(other.Pcf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (SpecVersion != null)
                    hashCode = hashCode * 59 + SpecVersion.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (CompanyIds != null)
                    hashCode = hashCode * 59 + CompanyIds.GetHashCode();
                    if (ProductDescription != null)
                    hashCode = hashCode * 59 + ProductDescription.GetHashCode();
                    if (ProductIds != null)
                    hashCode = hashCode * 59 + ProductIds.GetHashCode();
                    if (ProductCategoryCpc != null)
                    hashCode = hashCode * 59 + ProductCategoryCpc.GetHashCode();
                    if (ProductNameCompany != null)
                    hashCode = hashCode * 59 + ProductNameCompany.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Pcf != null)
                    hashCode = hashCode * 59 + Pcf.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductFootprint left, ProductFootprint right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductFootprint left, ProductFootprint right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
