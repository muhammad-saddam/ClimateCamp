/*
 * pathfinder-endpoint
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ClimateCamp.GHG.Calculations.Pathfinder
{ 
    /// <summary>
    /// Data Type \&quot;BiogenicEmissions\&quot; of Spec vesrion 1
    /// </summary>
    [DataContract]
    public partial class BiogenicEmissions : IEquatable<BiogenicEmissions>
    { 
        /// <summary>
        /// Gets or Sets LandUseEmissions
        /// </summary>

        [DataMember(Name="landUseEmissions")]
        //TODO: To check documentation for exact name. Might have been changed to "landManagementGhgEmissions"
        public AllOfBiogenicEmissionsLandUseEmissions LandUseEmissions { get; set; }

        /// <summary>
        /// Gets or Sets LandUseChangeEmissions
        /// </summary>

        [DataMember(Name="landUseChangeEmissions")]
        public AllOfBiogenicEmissionsLandUseChangeEmissions LandUseChangeEmissions { get; set; }

        /// <summary>
        /// Gets or Sets OtherEmissions
        /// </summary>

        [DataMember(Name="otherEmissions")]
        public AllOfBiogenicEmissionsOtherEmissions OtherEmissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiogenicEmissions {\n");
            sb.Append("  LandUseEmissions: ").Append(LandUseEmissions).Append("\n");
            sb.Append("  LandUseChangeEmissions: ").Append(LandUseChangeEmissions).Append("\n");
            sb.Append("  OtherEmissions: ").Append(OtherEmissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiogenicEmissions)obj);
        }

        /// <summary>
        /// Returns true if BiogenicEmissions instances are equal
        /// </summary>
        /// <param name="other">Instance of BiogenicEmissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiogenicEmissions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LandUseEmissions == other.LandUseEmissions ||
                    LandUseEmissions != null &&
                    LandUseEmissions.Equals(other.LandUseEmissions)
                ) && 
                (
                    LandUseChangeEmissions == other.LandUseChangeEmissions ||
                    LandUseChangeEmissions != null &&
                    LandUseChangeEmissions.Equals(other.LandUseChangeEmissions)
                ) && 
                (
                    OtherEmissions == other.OtherEmissions ||
                    OtherEmissions != null &&
                    OtherEmissions.Equals(other.OtherEmissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LandUseEmissions != null)
                    hashCode = hashCode * 59 + LandUseEmissions.GetHashCode();
                    if (LandUseChangeEmissions != null)
                    hashCode = hashCode * 59 + LandUseChangeEmissions.GetHashCode();
                    if (OtherEmissions != null)
                    hashCode = hashCode * 59 + OtherEmissions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiogenicEmissions left, BiogenicEmissions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiogenicEmissions left, BiogenicEmissions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
