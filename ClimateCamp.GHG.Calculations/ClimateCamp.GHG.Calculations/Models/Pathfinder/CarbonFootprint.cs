/*
 * pathfinder-endpoint
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ClimateCamp.GHG.Calculations.Pathfinder
{ 
    /// <summary>
    /// Data Type \&quot;CarbonFootprint\&quot; of Spec Version 1
    /// </summary>
    [DataContract]
    public partial class CarbonFootprint : IEquatable<CarbonFootprint>
    { 
        /// <summary>
        /// Gets or Sets DeclaredUnit
        /// </summary>
        [Required]

        [DataMember(Name="declaredUnit")]
        public DeclaredUnit DeclaredUnit { get; set; }

        /// <summary>
        /// Gets or Sets UnitaryProductAmount
        /// </summary>
        [Required]
        [RegularExpression(@"^(\d*[1-9]\d*([\.]\d+)?|\d+(\.\d*[1-9]\d*)?)$")]
        [DataMember(Name="unitaryProductAmount")]
        public string UnitaryProductAmount { get; set; }

        /// <summary>
        /// Gets or Sets FossilGhgEmissions
        /// </summary>
        [Required]
        [RegularExpression(@"^\d+(\.\d+)?$")]
        [DataMember(Name="fossilGhgEmissions")]
        public string FossilGhgEmissions { get; set; }

        /// <summary>
        /// Gets or Sets BiogenicEmissions
        /// </summary>

        [DataMember(Name="biogenicEmissions")]
        public AllOfCarbonFootprintBiogenicEmissions BiogenicEmissions { get; set; }

        /// <summary>
        /// Gets or Sets BiogenicCarbonContent
        /// </summary>
        [Required]
        [RegularExpression(@"^\d+(\.\d+)?$")]
        [DataMember(Name="biogenicCarbonContent")]
        public string BiogenicCarbonContent { get; set; }

        /// <summary>
        /// Gets or Sets ReportingPeriodStart
        /// </summary>
        [Required]

        [DataMember(Name="referencePeriodStart")]
        public DateTime? ReferencePeriodStart { get; set; }

        /// <summary>
        /// Gets or Sets ReportingPeriodEnd
        /// </summary>
        [Required]

        [DataMember(Name="referencePeriodEnd")]
        public DateTime? ReferencePeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryDataShare
        /// </summary>
        [Required]

        [DataMember(Name="primaryDataShare")]
        public double? PrimaryDataShare { get; set; }

        /// <summary>
        /// Gets or Sets EmissionFactorSources
        /// </summary>

        [DataMember(Name="emissionFactorSources")]
        public AllOfCarbonFootprintEmissionFactorSources EmissionFactorSources { get; set; }

        /// <summary>
        /// Gets or Sets BoundaryProcessesDescription
        /// </summary>

        [DataMember(Name="boundaryProcessesDescription")]
        public string BoundaryProcessesDescription { get; set; }

        /// <summary>
        /// Gets or Sets CrossSectoralStandardsUsed
        /// </summary>
        [Required]

        [DataMember(Name="crossSectoralStandardsUsed")]
        public CrossSectoralStandardSet CrossSectoralStandardsUsed { get; set; }

        /// <summary>
        /// Gets or Sets ProductOrSectorSpecificRules
        /// </summary>
        [Required]

        [DataMember(Name="productOrSectorSpecificRules")]
        public ProductOrSectorSpecificRuleSet ProductOrSectorSpecificRules { get; set; }

        /// <summary>
        /// Gets or Sets AllocationRulesDescription
        /// </summary>

        [DataMember(Name="allocationRulesDescription")]
        public string AllocationRulesDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarbonFootprint {\n");
            sb.Append("  DeclaredUnit: ").Append(DeclaredUnit).Append("\n");
            sb.Append("  UnitaryProductAmount: ").Append(UnitaryProductAmount).Append("\n");
            sb.Append("  FossilGhgEmissions: ").Append(FossilGhgEmissions).Append("\n");
            sb.Append("  BiogenicEmissions: ").Append(BiogenicEmissions).Append("\n");
            sb.Append("  BiogenicCarbonContent: ").Append(BiogenicCarbonContent).Append("\n");
            sb.Append("  ReportingPeriodStart: ").Append(ReferencePeriodStart).Append("\n");
            sb.Append("  ReportingPeriodEnd: ").Append(ReferencePeriodEnd).Append("\n");
            sb.Append("  PrimaryDataShare: ").Append(PrimaryDataShare).Append("\n");
            sb.Append("  EmissionFactorSources: ").Append(EmissionFactorSources).Append("\n");
            sb.Append("  BoundaryProcessesDescription: ").Append(BoundaryProcessesDescription).Append("\n");
            sb.Append("  CrossSectoralStandardsUsed: ").Append(CrossSectoralStandardsUsed).Append("\n");
            sb.Append("  ProductOrSectorSpecificRules: ").Append(ProductOrSectorSpecificRules).Append("\n");
            sb.Append("  AllocationRulesDescription: ").Append(AllocationRulesDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CarbonFootprint)obj);
        }

        /// <summary>
        /// Returns true if CarbonFootprint instances are equal
        /// </summary>
        /// <param name="other">Instance of CarbonFootprint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarbonFootprint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeclaredUnit == other.DeclaredUnit ||
                    DeclaredUnit != null &&
                    DeclaredUnit.Equals(other.DeclaredUnit)
                ) && 
                (
                    UnitaryProductAmount == other.UnitaryProductAmount ||
                    UnitaryProductAmount != null &&
                    UnitaryProductAmount.Equals(other.UnitaryProductAmount)
                ) && 
                (
                    FossilGhgEmissions == other.FossilGhgEmissions ||
                    FossilGhgEmissions != null &&
                    FossilGhgEmissions.Equals(other.FossilGhgEmissions)
                ) && 
                (
                    BiogenicEmissions == other.BiogenicEmissions ||
                    BiogenicEmissions != null &&
                    BiogenicEmissions.Equals(other.BiogenicEmissions)
                ) && 
                (
                    BiogenicCarbonContent == other.BiogenicCarbonContent ||
                    BiogenicCarbonContent != null &&
                    BiogenicCarbonContent.Equals(other.BiogenicCarbonContent)
                ) && 
                (
                    ReferencePeriodStart == other.ReferencePeriodStart ||
                    ReferencePeriodStart != null &&
                    ReferencePeriodStart.Equals(other.ReferencePeriodStart)
                ) && 
                (
                    ReferencePeriodEnd == other.ReferencePeriodEnd ||
                    ReferencePeriodEnd != null &&
                    ReferencePeriodEnd.Equals(other.ReferencePeriodEnd)
                ) && 
                (
                    PrimaryDataShare == other.PrimaryDataShare ||
                    PrimaryDataShare != null &&
                    PrimaryDataShare.Equals(other.PrimaryDataShare)
                ) && 
                (
                    EmissionFactorSources == other.EmissionFactorSources ||
                    EmissionFactorSources != null &&
                    EmissionFactorSources.Equals(other.EmissionFactorSources)
                ) && 
                (
                    BoundaryProcessesDescription == other.BoundaryProcessesDescription ||
                    BoundaryProcessesDescription != null &&
                    BoundaryProcessesDescription.Equals(other.BoundaryProcessesDescription)
                ) && 
                (
                    CrossSectoralStandardsUsed == other.CrossSectoralStandardsUsed ||
                    CrossSectoralStandardsUsed != null &&
                    CrossSectoralStandardsUsed.Equals(other.CrossSectoralStandardsUsed)
                ) && 
                (
                    ProductOrSectorSpecificRules == other.ProductOrSectorSpecificRules ||
                    ProductOrSectorSpecificRules != null &&
                    ProductOrSectorSpecificRules.Equals(other.ProductOrSectorSpecificRules)
                ) && 
                (
                    AllocationRulesDescription == other.AllocationRulesDescription ||
                    AllocationRulesDescription != null &&
                    AllocationRulesDescription.Equals(other.AllocationRulesDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeclaredUnit != null)
                    hashCode = hashCode * 59 + DeclaredUnit.GetHashCode();
                    if (UnitaryProductAmount != null)
                    hashCode = hashCode * 59 + UnitaryProductAmount.GetHashCode();
                    if (FossilGhgEmissions != null)
                    hashCode = hashCode * 59 + FossilGhgEmissions.GetHashCode();
                    if (BiogenicEmissions != null)
                    hashCode = hashCode * 59 + BiogenicEmissions.GetHashCode();
                    if (BiogenicCarbonContent != null)
                    hashCode = hashCode * 59 + BiogenicCarbonContent.GetHashCode();
                    if (ReferencePeriodStart != null)
                    hashCode = hashCode * 59 + ReferencePeriodStart.GetHashCode();
                    if (ReferencePeriodEnd != null)
                    hashCode = hashCode * 59 + ReferencePeriodEnd.GetHashCode();
                    if (PrimaryDataShare != null)
                    hashCode = hashCode * 59 + PrimaryDataShare.GetHashCode();
                    if (EmissionFactorSources != null)
                    hashCode = hashCode * 59 + EmissionFactorSources.GetHashCode();
                    if (BoundaryProcessesDescription != null)
                    hashCode = hashCode * 59 + BoundaryProcessesDescription.GetHashCode();
                    if (CrossSectoralStandardsUsed != null)
                    hashCode = hashCode * 59 + CrossSectoralStandardsUsed.GetHashCode();
                    if (ProductOrSectorSpecificRules != null)
                    hashCode = hashCode * 59 + ProductOrSectorSpecificRules.GetHashCode();
                    if (AllocationRulesDescription != null)
                    hashCode = hashCode * 59 + AllocationRulesDescription.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CarbonFootprint left, CarbonFootprint right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CarbonFootprint left, CarbonFootprint right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
